<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml">
	<command:command 
		xmlns:maml="http://schemas.microsoft.com/maml/2004/10" 
		xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" 
		xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" 
		xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
		<command:details>
			<command:name>Enter-sthModuleScope</command:name>
			<command:verb>Enter</command:verb>
			<command:noun>sthModuleScope</command:noun>
			<maml:description>
				<maml:para>Enters the scope of a module specified.</maml:para>
			</maml:description>
		</command:details>
		<maml:description>
			<maml:para>Enter-sthModuleScope function enters the scope of a specified module and allows to invoke command in that scope.
This provides means to call internal module functions and access nonexported module variables.
When you enter a module scope, command prompt changes to include the name of the module.
To exit from the module scope type 'exit'.</maml:para>
		</maml:description>
		<command:syntax>
			<command:syntaxItem>
				<maml:name>Enter-sthModuleScope</maml:name>
				<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
					<maml:name>Module</maml:name>
					<maml:Description>
            <maml:para>Specifies the name of a module.</maml:para>
            <maml:para>This can be a string object or System.Management.Automation.PSModuleInfo object.
You can get the PSModuleInfo object by using the Get-Module cmdlet.</maml:para>
          </maml:Description>
					<command:parameterValue required="true" variableLength="false">System.Object</command:parameterValue>
					<dev:type>
						<maml:name>System.Object</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
        <maml:name>Module</maml:name>
        <maml:Description>
          <maml:para>Specifies the name of a module.</maml:para>
					<maml:para>This can be a string object or System.Management.Automation.PSModuleInfo object.
You can get the PSModuleInfo object by using the Get-Module cmdlet.</maml:para>
        </maml:Description>
        <command:parameterValue required="true" variableLength="false">System.Object</command:parameterValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
		</command:parameters>
		<command:examples>
			<command:example>
				<maml:title>Example 1: Enter the scope of the module</maml:title>
				<dev:code>PS C:\> Enter-sthModuleScope -Module module_name
[module_name] PS C:\>> exit
PS C:\></dev:code>
				<dev:remarks>
					<maml:para>This command enters the scope of the module.
When enter, the command prompt changes to include the name of the module.
After that, the 'exit' command issued to exit the module's scope.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 2: Enter the module's scope using PSModuleInfo object</maml:title>
				<dev:code>PS C:\> $Module = Get-Module -Name 'module_name' -ListAvailable
PS C:\> Enter-sthModuleScope -Module $Module
[module_name] PS C:\>> exit
PS C:\></dev:code>
				<dev:remarks>
					<maml:para>These commands enter the scope of the module using PSModuleInfo object.
The first command uses the Get-Module cmdlet to get PSModuleInfo object for the module 'module_name'.
The second command enters the scope of the module 'module_name'.
The third command exits the module's scope.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 3: Enter the module's scope using pipeline</maml:title>
				<dev:code>PS C:\> 'module_name' | Enter-sthModuleScope
[module_name] PS C:\>></dev:code>
				<dev:remarks>
					<maml:para>This command enters the scope of the module using pipeline.</maml:para>
          <maml:para/>
          <maml:para/>
        </dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 4: Enter the module's scope using PSModuleInfo object and pipeline</maml:title>
				<dev:code>PS C:\> Get-Module module_name -ListAvailable | Enter-sthModuleScope
[module_name] PS C:\>></dev:code>
				<dev:remarks>
          <maml:para>This command enters the scope of the module by sending PSModuleInfo object through the pipeline.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
		</command:examples>
		<command:relatedLinks>
			<maml:navigationLink>
				<maml:linkText>Get-sthModuleScopeFunction</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Get-sthModuleScopeVariable</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Get-sthScopeDepth</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</command:relatedLinks>
	</command:command>
	<command:command 
		xmlns:maml="http://schemas.microsoft.com/maml/2004/10" 
		xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" 
		xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" 
		xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
		<command:details>
			<command:name>Get-sthModuleScopeFunction</command:name>
			<command:verb>Get</command:verb>
			<command:noun>sthModuleScopeFunction</command:noun>
			<maml:description>
				<maml:para>Gets all the functions defined in a module.</maml:para>
			</maml:description>
		</command:details>
		<maml:description>
			<maml:para>Get-sthModuleScopeFunction returns all the functions, defined in the module specified by -Module parameter,
or the module, the scope of which was entered by using the Enter-sthModuleScope function.</maml:para>
			<maml:para>By default, Get-sthModuleScopeFunction gets all functions - public and private,
but you can specify which functions you are interested in by using -PublicOnly and -PrivateOnly parameters.</maml:para>
		</maml:description>
		<command:syntax>
			<command:syntaxItem>
				<maml:name>Get-sthModuleScopeFunction</maml:name>
				<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
					<maml:name>Module</maml:name>
					<maml:Description>
          <maml:para>Specifies the name of a module.</maml:para>
            <maml:para>This can be a string object or System.Management.Automation.PSModuleInfo object.
You can get the PSModuleInfo object by using the Get-Module cmdlet.</maml:para>
          </maml:Description>
					<command:parameterValue required="true" variableLength="false">System.Object</command:parameterValue>
					<dev:type>
						<maml:name>System.Object</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>PublicOnly</maml:name>
          <maml:Description>
            <maml:para>Specifies, that command should return only public functions.</maml:para>
            <maml:para>By default, Get-sthModuleScopeFunction returns all functions - public and private.</maml:para>
          </maml:Description>
          <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
			</command:syntaxItem>
			<command:syntaxItem>
        <maml:name>Get-sthModuleScopeFunction</maml:name>
				<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
					<maml:name>Module</maml:name>
					<maml:Description>
						<maml:para>Specifies the name of a module.</maml:para>
            <maml:para>This can be a string object or System.Management.Automation.PSModuleInfo object.
You can get the PSModuleInfo object by using the Get-Module cmdlet.</maml:para>
          </maml:Description>
					<command:parameterValue required="true" variableLength="false">System.Object</command:parameterValue>
					<dev:type>
						<maml:name>System.Object</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>PrivateOnly</maml:name>
          <maml:Description>
						<maml:para>Specifies, that command should return only private functions.</maml:para>
						<maml:para>By default, Get-sthModuleScopeFunction returns all functions - public and private.</maml:para>
					</maml:Description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:type>
						<maml:name>SwitchParameter</maml:name>
						<maml:uri />
					</dev:type>
				<dev:defaultValue>False</dev:defaultValue>
			</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
        <maml:name>Module</maml:name>
        <maml:Description>
          <maml:para>Specifies the name of a module.</maml:para>
					<maml:para>This can be a string object or System.Management.Automation.PSModuleInfo object.
You can get the PSModuleInfo object by using the Get-Module cmdlet.</maml:para>
        </maml:Description>
        <command:parameterValue required="true" variableLength="false">System.Object</command:parameterValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>PublicOnly</maml:name>
        <maml:Description>
          <maml:para>Specifies, that command should return only public functions.</maml:para>
          <maml:para>By default, Get-sthModuleScopeFunction returns all functions - public and private.</maml:para>
        </maml:Description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>PrivateOnly</maml:name>
        <maml:Description>
					<maml:para>Specifies, that command should return only private functions.</maml:para>
					<maml:para>By default, Get-sthModuleScopeFunction returns all functions - public and private.</maml:para>
        </maml:Description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
		</command:parameters>
		<command:examples>
			<command:example>
				<maml:title>Example 1: Enter the module's scope and get all module functions - public and private</maml:title>
				<dev:code>PS C:\> Enter-sthModuleScope -Module module_name
[module_name] PS C:\>> Get-sthModuleScopeFunction</dev:code>
				<dev:remarks>
					<maml:para>These commands get all functions, defined in the module 'module_name'.
The first command enters the scope of the module 'module_name'.
The second command gets all the module's functions.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 2: Enter the module's scope and get all pubic functions of the module</maml:title>
				<dev:code>PS C:\> Enter-sthModuleScope -Module module_name
[module_name] PS C:\>> Get-sthModuleScopeFunction -PublicOnly</dev:code>
				<dev:remarks>
					<maml:para>These commands get all public functions, defined in the module 'module_name'.
The first command enters the scope of the module 'module_name'.
The second command gets all the module's public functions.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 3: Enter the module's scope and get all private functions of the module</maml:title>
				<dev:code>PS C:\> Enter-sthModuleScope -Module module_name
[module_name] PS C:\>> Get-sthModuleScopeFunction -PrivateOnly</dev:code>
				<dev:remarks>
					<maml:para>These commands get all private functions, defined in the module 'module_name'.
The first command enters the scope of the module 'module_name'.
The second command gets all the module's private functions.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 4: Get all functions of the module by using -Module parameter</maml:title>
				<dev:code>PS C:\> Get-sthModuleScopeFunction -Module 'module_name'</dev:code>
				<dev:remarks>
					<maml:para>This command gets all functions, defined in the module 'module_name'.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 5: Get all functions of the module by using PSModuleInfo object</maml:title>
				<dev:code>PS C:\> $Module = Get-Module -Name 'module_info' -ListAvailable
PS C:\> Get-sthModuleScopeFunction -Module $Module</dev:code>
				<dev:remarks>
					<maml:para>These commands get all functions, defined in the module 'module_name' by using PSModuleInfo object.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 6: Get all functions of the module by using pipeline</maml:title>
				<dev:code>PS C:\> 'module_name' | Get-sthModuleScopeFunction</dev:code>
				<dev:remarks>
					<maml:para>This command gets all functions, defined in the module 'module_name' by using pipeline.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 7: Get all functions of the module by using PSModuleInfo object and pipeline</maml:title>
				<dev:code>PS C:\> Get-Module -Name 'module_name' -ListAvailable | Get-sthModuleScopeFunction</dev:code>
				<dev:remarks>
					<maml:para>This command gets all functions, defined in the module 'module_name' by accepting PSModuleInfo object from the pipeline.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
		</command:examples>
		<command:relatedLinks>
			<maml:navigationLink>
				<maml:linkText>Enter-sthModuleScope</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Get-sthModuleScopeVariable</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Get-sthScopeDepth</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</command:relatedLinks>
	</command:command>
	<command:command 
		xmlns:maml="http://schemas.microsoft.com/maml/2004/10" 
		xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" 
		xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" 
		xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
		<command:details>
			<command:name>Get-sthModuleScopeVariable</command:name>
			<command:verb>Get</command:verb>
			<command:noun>sthModuleScopeVariable</command:noun>
			<maml:description>
				<maml:para>Gets all the variables defined in a module.</maml:para>
			</maml:description>
		</command:details>
		<maml:description>
			<maml:para>Get-sthModuleScopeVariable returns all the variables, defined in the module specified by -Module parameter,
or the module, the scope of which was entered by using the Enter-sthModuleScope function.</maml:para>
			<maml:para>By default, Get-sthModuleScopeVariable gets all variables - public and private,
but you can specify which variables you are interested in by using -PublicOnly and -PrivateOnly parameters.</maml:para>
		</maml:description>
		<command:syntax>
			<command:syntaxItem>
				<maml:name>Get-sthModuleScopeVariable</maml:name>
				<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
					<maml:name>Module</maml:name>
					<maml:Description>
						<maml:para>Specifies the name of a module.</maml:para>
            <maml:para>This can be a string object or System.Management.Automation.PSModuleInfo object.
You can get the PSModuleInfo object by using the Get-Module cmdlet.</maml:para>
          </maml:Description>
					<command:parameterValue required="true" variableLength="false">System.Object</command:parameterValue>
					<dev:type>
						<maml:name>System.Object</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>PublicOnly</maml:name>
          <maml:Description>
            <maml:para>Specifies, that command should return only public variables.</maml:para>
            <maml:para>By default, Get-sthModuleScopeVariable returns all variables - public and private.</maml:para>
          </maml:Description>
          <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
			</command:syntaxItem>
			<command:syntaxItem>
        <maml:name>Get-sthModuleScopeVariable</maml:name>
				<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
					<maml:name>Module</maml:name>
					<maml:Description>
						<maml:para>Specifies the name of a module.</maml:para>
            <maml:para>This can be a string object or System.Management.Automation.PSModuleInfo object.
You can get the PSModuleInfo object by using the Get-Module cmdlet.</maml:para>
          </maml:Description>
					<command:parameterValue required="true" variableLength="false">System.Object</command:parameterValue>
					<dev:type>
						<maml:name>System.Object</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>PrivateOnly</maml:name>
          <maml:Description>
						<maml:para>Specifies, that command should return only private variables.</maml:para>
						<maml:para>By default, Get-sthModuleScopeVariable returns all variables - public and private.</maml:para>
					</maml:Description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:type>
						<maml:name>SwitchParameter</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue>False</dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
        <maml:name>Module</maml:name>
        <maml:Description>
          <maml:para>Specifies the name of a module.</maml:para>
					<maml:para>This can be a string object or System.Management.Automation.PSModuleInfo object.
You can get the PSModuleInfo object by using the Get-Module cmdlet.</maml:para>
        </maml:Description>
        <command:parameterValue required="true" variableLength="false">System.Object</command:parameterValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>PublicOnly</maml:name>
        <maml:Description>
          <maml:para>Specifies, that command should return only public variables.</maml:para>
          <maml:para>By default, Get-sthModuleScopeVariable returns all variables - public and private.</maml:para>
        </maml:Description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>PrivateOnly</maml:name>
        <maml:Description>
					<maml:para>Specifies, that command should return only private variables.</maml:para>
					<maml:para>By default, Get-sthModuleScopeVariable returns all variables - public and private.</maml:para>
        </maml:Description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
		</command:parameters>
		<command:examples>
			<command:example>
				<maml:title>Example 1: Enter the module's scope and get all module variables - public and private</maml:title>
				<dev:code>PS C:\> Enter-sthModuleScope -Module module_name
[module_name] PS C:\>> Get-sthModuleScopeVariable</dev:code>
				<dev:remarks>
					<maml:para>These commands get all variables, defined in the module 'module_name'.
The first command enters the scope of the module 'module_name'.
The second command gets all the module's variables.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 2: Enter the module's scope and get all pubic variables of the module</maml:title>
				<dev:code>PS C:\> Enter-sthModuleScope -Module module_name
[module_name] PS C:\>> Get-sthModuleScopeVariable -PublicOnly</dev:code>
				<dev:remarks>
					<maml:para>These commands get all public variables, defined in the module 'module_name'.
The first command enters the scope of the module 'module_name'.
The second command gets all the module's public variables.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 3: Enter the module's scope and get all private variables of the module</maml:title>
				<dev:code>PS C:\> Enter-sthModuleScope -Module module_name
[module_name] PS C:\>> Get-sthModuleScopeVariable -PrivateOnly</dev:code>
				<dev:remarks>
					<maml:para>These commands get all private variables, defined in the module 'module_name'.
The first command enters the scope of the module 'module_name'.
The second command gets all the module's private variables.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 4: Get all variables of the module by using -Module parameter</maml:title>
				<dev:code>PS C:\> Get-sthModuleScopeVariable -Module 'module_name'</dev:code>
				<dev:remarks>
					<maml:para>This command gets all variables, defined in the module 'module_name'.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 5: Get all variables of the module by using PSModuleInfo object</maml:title>
				<dev:code>PS C:\> $Module = Get-Module -Name 'module_info' -ListAvailable
PS C:\> Get-sthModuleScopeVariable -Module $Module</dev:code>
				<dev:remarks>
					<maml:para>These commands get all variables, defined in the module 'module_name' by using PSModuleInfo object.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 6: Get all variables of the module by using pipeline</maml:title>
				<dev:code>PS C:\> 'module_name' | Get-sthModuleScopeVariable</dev:code>
				<dev:remarks>
					<maml:para>This command gets all variables, defined in the module 'module_name' by using pipeline.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 7: Get all variables of the module by using PSModuleInfo object and pipeline</maml:title>
				<dev:code>PS C:\> Get-Module -Name 'module_name' -ListAvailable | Get-sthModuleScopeVariable</dev:code>
				<dev:remarks>
					<maml:para>This command gets all variables, defined in the module 'module_name' by accepting PSModuleInfo object from the pipeline.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
		</command:examples>
		<command:relatedLinks>
			<maml:navigationLink>
				<maml:linkText>Enter-sthModuleScope</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Get-sthModuleScopeFunction</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Get-sthScopeDepth</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</command:relatedLinks>
	</command:command>
	<command:command 
		xmlns:maml="http://schemas.microsoft.com/maml/2004/10" 
		xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" 
		xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" 
		xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
		<command:details>
			<command:name>Get-sthScopeDepth</command:name>
			<command:verb>Get</command:verb>
			<command:noun>sthScopeDepth</command:noun>
			<maml:description>
				<maml:para>Gets current scope depth.</maml:para>
			</maml:description>
		</command:details>
		<maml:description>
			<maml:para>Get-sthScopeDepth returns current scope depth, where 0 means, that you are in the global scope,
1 - you are one scope deeper than global, 2 - you are two scopes deeper than global, etc.</maml:para>
		</maml:description>
		<command:syntax>
			<command:syntaxItem>
				<maml:name>Get-sthScopeDepth</maml:name>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
		</command:parameters>
		<command:examples>
			<command:example>
				<maml:title>Example 1: Get current scope depth</maml:title>
				<dev:code>PS C:\> Get-sthScopeDepth
0</dev:code>
				<dev:remarks>
					<maml:para>This command gets current scope depth.
The result is 0, which means - you are in the global scope.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 2: Get current scope depth when in the module's scope</maml:title>
				<dev:code>PS C:\> Enter-sthModuleScope -Module module_name
[module_name] PS C:\>> Get-sthScopeDepth
1</dev:code>
				<dev:remarks>
					<maml:para>These commands get current scope depth from the module's scope.
The first command enters the scope of the module 'module_name'.
The second command gets current scope depth.
The result is 1, which means - you are one scope deeper than the global scope.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>Example 3: Get current scope depth while debugging a function</maml:title>
				<dev:code>PS C:\> Set-PSDebug -Step
PS C:\> Get-sthModuleScopeFunction -Module sthModuleScope

Continue with this operation?
   1+  >>>> Get-sthModuleScopeFunction -Module sthModuleScope
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "Y"): Y

Continue with this operation?
  26+  >>>> {
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "Y"): S

PS C:\>> Get-sthScopeDepth
2</dev:code>
				<dev:remarks>
					<maml:para>These commands get current module scope depth while debugging the Get-sthModuleScopeFunction function.
The first command enables script debugging.
The second command invokes the Get-sthModuleScopeFunction function with 'sthModuleScope' as the -Module parameter value.
Then, on the first debug request 'Y' is specified, which means continuing function execution.
On the second debug request 'S' is specified, which means suspending execution.
Then, at the debug prompt the Get-sthScopeDepth function invoked.
The result is 2, which means - you are two scopes deeper, than the global scope.</maml:para>
          <maml:para/>
          <maml:para/>
				</dev:remarks>
			</command:example>
		</command:examples>
		<command:relatedLinks>
			<maml:navigationLink>
				<maml:linkText>Enter-sthModuleScope</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Get-sthModuleScopeFunction</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>Get-sthModuleScopeVariable</maml:linkText>
				<maml:uri></maml:uri>
			</maml:navigationLink>
		</command:relatedLinks>
	</command:command>
</helpItems>